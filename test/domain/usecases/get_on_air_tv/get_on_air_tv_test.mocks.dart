// Mocks generated by Mockito 5.3.2 from annotations
// in submission/test/domain/usecases/get_on_air_tv/get_on_air_tv_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:submission/core/error/failure.dart' as _i5;
import 'package:submission/domain/entities/tv.dart' as _i6;
import 'package:submission/domain/entities/tv_detail.dart' as _i7;
import 'package:submission/domain/repositories/tv_repository.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TvRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvRepository extends _i1.Mock implements _i3.TvRepository {
  MockTvRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Tv>>> getOnAirTv() =>
      (super.noSuchMethod(
        Invocation.method(
          #getOnAirTv,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, List<_i6.Tv>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.Tv>>(
          this,
          Invocation.method(
            #getOnAirTv,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Tv>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Tv>>> getPopularTv() =>
      (super.noSuchMethod(
        Invocation.method(
          #getPopularTv,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, List<_i6.Tv>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.Tv>>(
          this,
          Invocation.method(
            #getPopularTv,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Tv>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Tv>>> getTopRatedTv() =>
      (super.noSuchMethod(
        Invocation.method(
          #getTopRatedTv,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, List<_i6.Tv>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.Tv>>(
          this,
          Invocation.method(
            #getTopRatedTv,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Tv>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i7.TvDetail>> getDetailTv(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDetailTv,
          [id],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i7.TvDetail>>.value(
            _FakeEither_0<_i5.Failure, _i7.TvDetail>(
          this,
          Invocation.method(
            #getDetailTv,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i7.TvDetail>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Tv>>> getRecommendedTv(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRecommendedTv,
          [id],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, List<_i6.Tv>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.Tv>>(
          this,
          Invocation.method(
            #getRecommendedTv,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Tv>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Tv>>> searchTv(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchTv,
          [query],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, List<_i6.Tv>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.Tv>>(
          this,
          Invocation.method(
            #searchTv,
            [query],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Tv>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, String>> saveWatchlist(_i7.TvDetail? tv) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveWatchlist,
          [tv],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, String>>.value(
            _FakeEither_0<_i5.Failure, String>(
          this,
          Invocation.method(
            #saveWatchlist,
            [tv],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, String>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, String>> removeWatchlist(
          _i7.TvDetail? tv) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeWatchlist,
          [tv],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, String>>.value(
            _FakeEither_0<_i5.Failure, String>(
          this,
          Invocation.method(
            #removeWatchlist,
            [tv],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, String>>);
  @override
  _i4.Future<bool> hasAddedToWatchlist(int? id) => (super.noSuchMethod(
        Invocation.method(
          #hasAddedToWatchlist,
          [id],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Tv>>> getAllWatchlist() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllWatchlist,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, List<_i6.Tv>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.Tv>>(
          this,
          Invocation.method(
            #getAllWatchlist,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Tv>>>);
}
